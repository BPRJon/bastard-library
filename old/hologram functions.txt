--@shared
--see github for instructions https://github.com/BPRJon/PAC-SF-Holos-Gen2
load_filedata = "pac2starfall/oblivion drone v1.txt" --sf_filedata path to the holograms you wanna load

if SERVER then
    local default_parent = chip()
    local pos_offset = Vector()
    local snd_Creation = true
    
    Holos = {}
    CreationTable = {}
    
    
    net.receive("Load_FileData",function()
        net.readStream(function(data)
            CreationTable = von.deserialize(bit.decompress(data))
            
            CreateHolograms( CreationTable )
            
            --timer.simple(1, function() JumbleHolos( Holos, CreationTable ) end)
        end)
    end)
    
    
    function CreateHolograms(holo_data)
        local i = 0
        
        hook.add("Think","CreateHolos",function()
            while cpuAverage() < cpuMax() * 0.5 and i < table.count(holo_data) do
                i = i + 1
                local v = holo_data[i]
                local holo = hologram.create(pos_offset+default_parent:localToWorld(v.Position),default_parent:localToWorldAngles(v.Angle),v.Model,v.Scale)
                holo:setMaterial(v.Material)
                --if type(v.Color) ~= "color" then v.Color = Color(v.Color.r,v.Color.g,v.Color.b,v.Color.a) end --unccomment this line if your colors arent working
                holo:setColor(v.Color)
                for i,v in pairs(v.Clips) do
                    holo:setClip(i,true,v.Origin,v.Normal,holo)
                end
                if v.Parent then holo:setParent(Holos[v.Parent]) holo:setLocalPos(v.Position) holo:setLocalAngles(v.Angle) else holo:setParent(default_parent) end
                if v.Index ~= "" then Holos[v.Index] = holo else Holos[i] = holo end
                
                if snd_Creation and sound.canEmitSound() then
                    holo:emitSound("physics/metal/metal_solid_impact_soft"..math.random(1,3)..".wav")
                end
                
                if i == table.count(holo_data) then
                    hook.remove("Think","CreateHolos")
                    return true
                end
            end
        end)
    end
    
    function JumbleHolos(holos,holo_data)
        for _,v in pairs(holos) do
            v:setPos(Vector()) v:setAngles(Angle()) v:setScale(Vector(1)) v:setMaterial("maxofs2d/models/cube_tool") v:setColor(Color(255,255,255,255)) v:setParent(nil)
        end
        timer.simple(1,function()
            local i = 0
            hook.add("Think","JumbleHolos",function()
                while cpuAverage() < cpuMax() * 0.5 and i < table.count(holo_data) do
                    i = i+1
                    local holo = holos[i]
                    local v = holo_data[i]
                    if v.Index ~= "" then holo = holos[v.Index] end
                    holo:setPos(default_parent:getPos()+v.Position) holo:setAngles(v.Angle) holo:setScale(v.Scale) holo:setMaterial(v.Material) holo:setColor(v.Color)
                    if v.Parent ~= nil then
                        holo:setParent(holos[v.Parent]) holo:setLocalPos(v.Position) holo:setLocalAngles(v.Angle)
                    else
                        holo:setParent(default_parent)
                    end
                end
            end)
        end)
    end
    
elseif CLIENT then
    if player()==owner() then
        if load_filedata ~= nil and load_filedata ~= "" then local data = file.read(load_filedata) net.start("Load_FileData") net.writeStream(bit.compress(data)) net.send() end
    end
end