--@author jon b
--[[
DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS /// DOCS ///

# OBJ Handler V2

very much imrpoved mesh loading

////// SHARED //////

## convertHolosToMeshes( holotbl, objlink, clientcallback, maxcpu or nil )

A shared function doesnt make much sense so let me quickly explain before telling you what each var is/does.
You will have to run this function twice, once on the server and once on the client, and the vars for both are slightly different.
    
It should look something like this:

```
if SERVER then
    convertHolosToMeshes( holotbl, objlink )
else
    convertHolosToMeshes( nil, objlink, clientcallback, maxcpu or nil )
end
```

### VARS

 - holotbl [SERVER] (table)
     - A table of hologram entities you want to turn into meshes
 - objlink [SHARED] (string)
     - A link to the obj file you want to turn into a mesh, must be pre-triangulated
 - clientcallback [CLIENT] (function)
     - A function that will automatically be run. This function has 2 inputs: holograms (table) and obj (table).
         - holograms is the holotbl sent to the client automatically by the function
         - obj is a table of Mesh objects created from your OBJ file
 - maxcpu [CLIENT] (number)
     - a number 0-1 representing how much of the client CPU the function can take to generate the mesh (default 0.25)

]]--
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

objHandler = {}

function convertHolosToMeshes( holotbl, objlink, clientcallback, maxcpu )
    
    if SERVER then
        hook.add( "ClientInitialized", "LoadOBJ_"..objlink, function()
            
            net.start( "NetHolos_"..objlink )
                net.writeTable( holotbl )
                net.send()
            
            end)
    elseif CLIENT then
        local receivedNet = false
        local objmesh = {}
        local co = function()end
        local clcpu = 0.25
        
        if maxcpu then clcpu = maxcpu end
        
        net.receive( "NetHolos_"..objlink, function()
            
            if not receivedNet then
            
            receivedNet = true
            
            local holograms = net.readTable()
            
            http.get( objlink, function(objstr)
                
                co = coroutine.wrap(function()
                        
                        objmesh = mesh.createFromObj( objstr, true, false )
                        
                        coroutine.yield()
                        
                        clientcallback( holograms, objmesh )
                        
                        coroutine.yield( true )
                    
                    end)
                    
                hook.add( "Think", "LoadMesh_"..objlink, function()
                    
                    while http.getMaximumRequests() - http.getActiveRequests() >= 1 and cpuAverage() <= cpuMax() * clcpu do
                        if co() then
                            hook.remove( "Think", "LoadMesh_"..objlink )
                            break
                        end
                    end
                    
                    end)
                
                end)
                
            end
            
            end)
    end
    
end