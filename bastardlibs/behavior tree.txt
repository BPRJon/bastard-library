--@author jon b
--@server

--[[

# Base Functions

## Branch Types

BRANCHTYPES = {
    SELECTOR = 1,
    SEQUENCE = 2
}
the different branch types that the tree can handle

Selectors will pick the first child node that succeeds and ticks it

Sequencers will tick all children unless one child fails

## Node States

NODESTATUS = {
    IDLE = -1,
    RUNNING = 0,
    FAILED = 1,
    SUCCEEDED = 2
}

the current status of the node

Idle - has not been run yet
Running - Is in the process of checking itself for success for failure
Failed - Failed its check
Succeeded - Succeeded its check

## Leaf Action States

ACTIONSTATUS = {
    IDLE = -1,
    RUNNING = 0,
    COMPLETED = 1
}

Idle - has not been run yet
Running - Is in the process of completing the action
Completed - Action is complete

## behaviorTree.createRootNode( blackboard )
makes a root node to begin building a behavior tree. a root node can only have ONE branch or leaf connected to it
the connected node will always succeed because otherwise the tree wouldn't be able to work

- blackboard (table)
    - the table you would like to supply to the tree. this table acts as the tree's 'memory', storing important variables for easy use
    
== RETURNS ==

- root (RootNode)
    - The root node


# RootNode Functions

## RootNode:getBlackBoard()
get the blackboard for you to be able to read or modify

== RETURNS ==

- blackboard (table)
    - The root node's blackboard
    
## RootNode:setBlackBoard( key, value )
sets the blackboards key to that value

- key (string or number)
    - the key/index of the blackboard you want to change
- value (any)
    - the value to set that key to

## RootNode:tick()
make the root node begin a tick down the tree

## RootNode:addBranch( branchtype )
a branch node is a decision node, and will either attempt to activate all children until ONE succeeds (selector) or will only succeed if all children can succeed (sequence)

- branchtype (number)
    - the type of branch you want to add, will automatically succeed. see BRANCHTYPES.
    
## RootNode:addLeaf( callback )
a leaf node is essentially an action node, whatever you'd like the tree to execute put into the callback and the leaf will automatically run it

- callback (function)
    - the function to run when the leaf succeeds. a leaf connected to a root will automatically succeed


# BranchNode Functions

## BranchNode:addBranch( branchtype, index, checkfunction )
adds a branch node as a child to this branch node

- branchtype (number)
    - the type of branch you want to add. see BRANCHTYPES.
- index (number)
    - essentially acts as the priority order for being run, in ascending order.
- checkfunction (function)
    - this function will need to change the node's status based on it's current progress. This function will control whether or not to continue down this path. see NODESTATUS
        
## BranchNode:getBlackBoard()
returns the blackboard table

== RETURNS ==
- blackboard (tbl)
    - the blackboard of the root node
    
## BranchNode:setBlackBoard( key, value )
sets a value in the blackboard from the branch

- key (string or number)
    - the key position of the table to want to modify
- value (any)
    - the value to be set in the table
    
## BranchNode:getStatus()
returns the number status of the node. see NODESTATUS

== RETURNS ==

- status (number)
    - current status of the node
    
## BranchNode:setStatus( status )
sets the status of the node according to NODESTATUS

- status (number)
    - the status you want to set the node to
    
## BranchNode:addLeaf( index, checkfunction, callback )
a leaf node is essentially an action node, where once the tree gets to this node actual actions can be taken

- index (number)
    - essentially acts as the priority order for being run, in ascending order.
- checkfunction (function)
    - this function will need to change the node's status based on it's current progress. Has one input, leaf, which is the created node. see NODESTATUS
- callback (functions)

# LeafNode Functions

## LeafNode:getStatus()
returns the status of the leaf node

== RETURNS ==

- status (number)
    - current status of the node. see NODESTATUS
    
## LeafNode:setStatus( status )
sets the status of the leaf node

- status (number)
    - the number status you wish to set this node's check to. see NODESTATUS

## LeafNode:getActionStatus()
returns the current action status of the leaf

== RETURNS ==

- status (number)
    - the current status of the leaf. see ACTIONSTATUS

## LeafNode:setActionStatus( status )
sets the current action status of the leaf

- status (number)
    - the current status of the leaf. see ACTIONSTATUS
    
## LeafNode:getBlackBoard()
returns the root's blackboard

== RETURNS ==

- blackboard (table)
    - the root node's blackboard
    
## LeafNode:setBlackBoard( key, value )

- key (string or number)
    - the key position of the table to want to modify
- value (any)
    - the value to be set in the table
    
# Tick and Check functions

Branches and Leaves have :check() and :tick() functions but you technically should never need to use them, but you might have some edge case you want to fire a node off so I will quickly explain the difference in the two functions:

node:check() will run the check function of the node, and will just likely set it's node status if you've correctly set up its check functions
    
node:tick() will run the node's children in the case of a branch, and the callback in the case of the leaf. this is a way to bypass checking down the tree if say you need someone to do something instantly and skip the tree temporarily

]]




behaviorTree = {}

BRANCHTYPES = {
    SELECTOR = 1,
    SEQUENCE = 2
}

NODESTATUS = {
    IDLE = -1,
    RUNNING = 0,
    FAILED = 1,
    SUCCEEDED = 2
}

ACTIONSTATUS = {
    IDLE = -1,
    RUNNING = 0,
    COMPLETED = 1
}

RootNode = class("RootNode")
BranchNode = class("BranchNode")
LeafNode = class("LeafNode")



function behaviorTree.createRootNode( blackboard )
    
    local root = RootNode:new()
    
    root.BlackBoard = blackboard
    
    return root
    
end

function RootNode:getBlackBoard()
    
    return self.BlackBoard
    
end

function RootNode:setBlackBoard( key, value )
    
    self.BlackBoard[key] = value
    
end

function RootNode:tick()
    
    self.Connections.Status = NODESTATUS.SUCCEEDED
    self.Connections:tick()
    
end

function RootNode:addBranch( branchtype )
    
    local branch = BranchNode:new()
    
    self.Connections = branch
    branch.BranchType = branchtype
    branch.Connections = {}
    branch.RootNode = self
    
    return branch
    
end

function RootNode:addLeaf( callback )
    
    local leaf = LeafNode:new()
    
    callback()
    
end



function BranchNode:getBlackBoard()
    
    return self.RootNode.BlackBoard
    
end

function BranchNode:setBlackBoard( key, value )
    
    self.RootNode.BlackBoard[key] = value
    
end

function BranchNode:getStatus()
    
    return self.Status
    
end

function BranchNode:setStatus( status )
    
    self.Status = status
    
end

function BranchNode:addBranch( branchtype, index, checkfunction )
    
        if type( index ) == "number" and type( checkfunction ) == "function" then
    
            local branch = BranchNode:new()
            
            self.Connections[index] = branch
            branch.Index = index
            branch.BranchType = branchtype
            branch.Connections = {}
            branch.Check = checkfunction
            branch.Status = NODESTATUS.IDLE
            branch.RootNode = self.RootNode
            branch.Parent = self
            
            return branch
            
        end
    
end

function BranchNode:check()
    
    self.Status = NODESTATUS.RUNNING
    self.Check( self )
    
end

function BranchNode:tick()
    
    self.Status = NODESTATUS.IDLE
    
    if self.BranchType == BRANCHTYPES.SELECTOR then
        
        for _,v in pairs( self.Connections ) do
            
            v:check()
            
            if v.Status == NODESTATUS.SUCCEEDED then
                
                v:tick()
                break
            end
            
        end
        
    elseif self.BranchType == BRANCHTYPES.SEQUENCE then
        
        local success = true
        
        for _,v in pairs( self.Connections ) do
            
            v:check()
            
            if v.Status == NODESTATUS.FAILED then
                
                success = false
                break
            end
            
        end
        
        if success then
            
            local index = 1
            
            self.Connections[1]:tick()
            
            timer.create( tostring( self ), 1, 0, function()
                
                if self.Connections[index]:getActionStatus() == nil or self.Connections[index]:getActionStatus() == ACTIONSTATUS.COMPLETED then
                    
                    if index ~= #self.Connections then
                        index = index + 1
                        self.Connections[index]:tick()
                    else
                        timer.stop( tostring( self ) )
                    end
                    
                end
                
            end)
            
        end
        
    end
    
end

function BranchNode:addLeaf( index, checkfunction, callback )
    
    local leaf = LeafNode:new()
    
    self.Connections[index] = leaf
    leaf.Index = index
    leaf.Status = NODESTATUS.IDLE
    leaf.ActionStatus = ACTIONSTATUS.IDLE
    leaf.CheckFunction = checkfunction
    leaf.Tick = callback
    leaf.RootNode = self.RootNode
    leaf.Parent = self
    
    return leaf
    
end



function LeafNode:getStatus()
    
    return self.Status
    
end

function LeafNode:setStatus( status )
    
    self.Status = status
    
end

function LeafNode:getActionStatus()
    
    return self.ActionStatus

end

function LeafNode:setActionStatus( status )
    
    self.ActionStatus = status
    
end

function LeafNode:check()
    
    self.Status = NODESTATUS.RUNNING
    self.CheckFunction( self )
    
end

function LeafNode:tick()
    
    self.ActionStatus = ACTIONSTATUS.RUNNING
    self.Tick( self )
    
end

function LeafNode:getBlackBoard()
    
    return self.RootNode.BlackBoard
    
end

function LeafNode:setBlackBoard( key, value )
    
    self.RootNode.BlackBoard[key] = value
    
end